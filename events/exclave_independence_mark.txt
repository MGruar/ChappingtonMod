namespace = ExclaveIndependence

# Trace roots
# Begins the process of marking counties and vassals that will remain part of the realm.
# Called indirectly from on_death, and directly from a testing decision.
# ROOT is the dying ruler

character_event = {
    id = ExclaveIndependence.100
    hide_window = yes

    is_triggered_only = yes

    immediate = {

        log = "ExclaveIndependence.100: Begin marking for [This.GetTitledName]"

        save_event_target_as = dying_ruler

        if = {
            limit = { has_game_rule = { name = ei__sea_connections  value = one_zone } }
            log = "rule one_zone"
        }

        if = {
            limit = { has_game_rule = { name = ei__sea_connections  value = two_zones } }
            log = "rule two_zones"
        }

        # First, mark all counties within our top titles.
        # (Only provinces we actually control will be traced.)
        # I considered doing all held titles (e.g. the Pope can use d_latium at the CM start) but that seems too easy to game.
        any_demesne_title = {
            limit = { is_primary_holder_title_tier = yes }
            any_de_jure_vassal_title = {
                limit = { tier = COUNT }
                location = { province_event = { id = ExclaveIndependence.101 } }
            }
        }

        # Use the capital as a fallback, if needed.
        # (e.g. titular king, or we somehow control no counties or vassals in the de jure territories, or count tier)
        # Otherwise you can keep your weird capital but lose everything else near it
        if = {
            limit = {
                NOT = { any_realm_province = { has_province_flag = ei__marked_province } }
            }
            log = "Using the capital"
            capital_scope = { province_event = { id = ExclaveIndependence.101 } }
        }

        # Finally, rare special cases, ensure the capital itself is marked (but don't trace through its neighbors)
        if = {
            limit = {
                OR = {
                    # We have nothing to usurp, and should probably lose our higher title instead of our capital!
                    NOT = { num_of_count_titles_in_realm = 2 }

                    # An "emergency usurp" might make a player vassal unplayable
                    any_vassal = {
                        ai = no
                        OR = {
                            is_patrician = yes
                            NOT = { num_of_count_titles = 2 }
                        }
                    }
                }
            }
            capital_scope = { set_province_flag = ei__marked_province }
        }
    }
}


# Mark province (ROOT), and also trace through it controlled by "event_target:dying_ruler".
# Do not use "FROM", which can be the dying ruler or another province!

province_event = {
    id = ExclaveIndependence.101
    hide_window = yes

    is_triggered_only = yes

    trigger = {
        is_land = yes  # This might not be necessary -- it seems like sea provinces cannot get events?
        NOT = { has_province_flag = ei__marked_province }
    }

    immediate = {
        log = "Mark province: [Root.GetName]:"
        set_province_flag = ei__marked_province

        if = {
            limit = {
                owner = {
                    OR = {
                        character = event_target:dying_ruler
                        is_liege_or_above = event_target:dying_ruler
                    }
                }
            }

            log = "Trace province: [Root.GetName]:"

            any_neighbor_province = {
                limit = { has_owner = yes }
                #log = "Direct land connection from [Root.GetName] to [This.GetName]"
                province_event = { id = ExclaveIndependence.101 }
                #log = "/Direct land connection from [Root.GetName] to [This.GetName]"
            }

            # Trace through limited number of sea connections, depending on game rules
            # This code would be faster, but doesn't work. I guess any_neighbor_province skip sea zones when used as an effect??
            #if = {
            #    limit = {
            #        OR = {
            #            has_game_rule = { name = ei__sea_connections  value = one_zone }
            #            has_game_rule = { name = ei__sea_connections  value = two_zones }
            #        }
            #        port = yes
            #    }
            #    log = "Begin tracing through limited sea zones from [Root.GetName]"
            #    any_neighbor_province = {  # first sea zone
            #        if = {
            #            limit = { is_land = no }
            #            log = "Trace through first sea zone..."
            #            log = "Trace through first sea zone: [This.GetName]"
            #            any_neighbor_province = {
            #                limit = { has_owner = yes }
            #                province_event = { id = ExclaveIndependence.101 }
            #            }
            #            if = {
            #                limit = { has_game_rule = { name = ei__sea_connections  value = two_zones } }
            #                any_neighbor_province = {  # second sea zone
            #                    if = {
            #                        limit = { is_land = no }
            #                        log = "Trace through second sea zone: [This.GetName]"
            #                        any_neighbor_province = {
            #                            limit = { has_owner = yes }
            #                            province_event = { id = ExclaveIndependence.101 }
            #                        }
            #                    }
            #                }
            #            }
            #        }
            #    }
            #}

            ## Trace through limited number of sea connections, depending on game rules
            if = {
                limit = {
                    OR = {
                        has_game_rule = { name = ei__sea_connections  value = one_zone }
                        has_game_rule = { name = ei__sea_connections  value = two_zones }
                    }
                    port = yes
                }
                log = "Reverse sea connections from [Root.GetName]:"
                any_province = {  # new land province to include
                    limit = {
                        is_land = yes
                        port = yes
                        OR {
                            any_neighbor_province = {
                                is_land = no
                                any_neighbor_province = {
                                    province = ROOT
                                }
                            }
                            AND = {
                                has_game_rule = { name = ei__sea_connections  value = two_zones }
                                any_neighbor_province = {
                                    is_land = no
                                    any_neighbor_province = {
                                        is_land = no
                                        any_neighbor_province = {
                                            province = ROOT
                                        }
                                    }
                                }
                            }
                        }
                    }
                    province_event = { id = ExclaveIndependence.101 }
                }
                log = "/Reverse sea connections from [Root.GetName]"
            }

            # Trace through all ports, depending on game rules
            if = {
                limit = {
                    has_game_rule = { name = ei__sea_connections  value = all_ports }
                    port = yes
                }
                #log = "Tracing through all ports:"
                any_province = {
                    limit = { port = yes }
                    province_event = { id = ExclaveIndependence.101 }
                }
                #log = "/Tracing through all ports"
            }

            log = "/Trace province: [Root.GetName]"
        }

        log = "/Mark province: [Root.GetName]"
    }

}

